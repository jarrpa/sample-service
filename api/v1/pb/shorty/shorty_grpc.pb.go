// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: shorty.proto

package shorty

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortenClient is the client API for Shorten service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Shorten(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error)
}

type shortenClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenClient(cc grpc.ClientConnInterface) ShortenClient {
	return &shortenClient{cc}
}

func (c *shortenClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/shorty.Shorten/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenClient) Shorten(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error) {
	out := new(ShortenResponse)
	err := c.cc.Invoke(ctx, "/shorty.Shorten/Shorten", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenServer is the server API for Shorten service.
// All implementations must embed UnimplementedShortenServer
// for forward compatibility
type ShortenServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Shorten(context.Context, *ShortenRequest) (*ShortenResponse, error)
	mustEmbedUnimplementedShortenServer()
}

// UnimplementedShortenServer must be embedded to have forward compatible implementations.
type UnimplementedShortenServer struct {
}

func (UnimplementedShortenServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedShortenServer) Shorten(context.Context, *ShortenRequest) (*ShortenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shorten not implemented")
}
func (UnimplementedShortenServer) mustEmbedUnimplementedShortenServer() {}

// UnsafeShortenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenServer will
// result in compilation errors.
type UnsafeShortenServer interface {
	mustEmbedUnimplementedShortenServer()
}

func RegisterShortenServer(s grpc.ServiceRegistrar, srv ShortenServer) {
	s.RegisterService(&Shorten_ServiceDesc, srv)
}

func _Shorten_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorty.Shorten/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorten_Shorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenServer).Shorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorty.Shorten/Shorten",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenServer).Shorten(ctx, req.(*ShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shorten_ServiceDesc is the grpc.ServiceDesc for Shorten service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shorten_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shorty.Shorten",
	HandlerType: (*ShortenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Shorten_Get_Handler,
		},
		{
			MethodName: "Shorten",
			Handler:    _Shorten_Shorten_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shorty.proto",
}
